name: PR Validation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v31
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - name: Check flake
        run: nix flake check --show-trace

      - name: Build project
        run: nix build --show-trace

      - name: Test shell startup
        env:
          XDG_RUNTIME_DIR: /home/runner/runtime
          WLR_BACKENDS: headless
          WLR_LIBINPUT_NO_DEVICES: 1
          WAYLAND_DISPLAY: wayland-1
        run: |
          mkdir $XDG_RUNTIME_DIR
          chown $USER $XDG_RUNTIME_DIR
          chmod 0700 $XDG_RUNTIME_DIR

          nix profile install 'nixpkgs#sway'
          sway &
          sleep 3  # Give Sway some time to start
          result/bin/caelestia-shell -d
          sleep 3  # Give the shell some time to start (and die)
          pgrep .quickshell-wra  # Fail job if shell died

          result/bin/caelestia-shell kill
          killall sway  # Clean exit

  lint-qml:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt and QML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-declarative-dev qml6-module-qtquick

      - name: Lint QML files
        run: |
          find . -name "*.qml" -type f | while read file; do
            echo "Checking $file"
            qmllint "$file" || echo "Warning: Issues found in $file"
          done

  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate project structure
        run: |
          echo "Validating Caelestia project structure..."
          
          # Check required directories
          required_dirs=("modules" "services" "components" "config" "utils")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Missing required directory: $dir"
              exit 1
            else
              echo "✅ Found directory: $dir"
            fi
          done
          
          # Check main shell file
          if [ ! -f "shell.qml" ]; then
            echo "❌ Missing main shell.qml file"
            exit 1
          else
            echo "✅ Found shell.qml"
          fi
          
          # Check flake files
          if [ ! -f "flake.nix" ]; then
            echo "❌ Missing flake.nix"
            exit 1
          else
            echo "✅ Found flake.nix"
          fi
          
          echo "✅ Project structure validation passed!"

  check-customizations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Magnus's customizations
        run: |
          echo "Checking Magnus's custom enhancements..."
          
          # Check for Network service enhancements
          if [ -f "services/Network.qml" ]; then
            if grep -q "ethernetConnections" services/Network.qml; then
              echo "✅ Network service ethernet enhancements found"
            else
              echo "⚠️  Network service may be missing ethernet enhancements"
            fi
            
            if grep -q "mullvadConnected" services/Network.qml; then
              echo "✅ Network service VPN enhancements found"
            else
              echo "⚠️  Network service may be missing VPN enhancements"
            fi
          fi
          
          # Check for Monitor management
          if [ -f "modules/bar/popouts/Monitor.qml" ]; then
            echo "✅ Monitor management UI found"
          else
            echo "⚠️  Monitor management UI not found"
          fi
          
          # Check for BitDepth service
          if [ -f "services/BitDepth.qml" ]; then
            echo "✅ BitDepth service found"
          else
            echo "⚠️  BitDepth service not found"
          fi
          
          echo "✅ Customization check completed!"
