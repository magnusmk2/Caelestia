# Pre-commit configuration for Caelestia
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        exclude: '(\.patch$|node_modules/)'
      - id: end-of-file-fixer
        exclude: '(\.patch$|node_modules/)'
      - id: check-yaml
        args: ["--unsafe"] # Allow custom YAML tags
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # QML and JavaScript linting
  - repo: local
    hooks:
      - id: qmllint
        name: QML Lint
        entry: bash
        language: system
        files: '\.qml$'
        args:
          [
            "-c",
            'for file in "$@"; do echo "Linting $file"; qmllint "$file" || true; done',
            "--",
          ]
        description: "Lint QML files for syntax and style issues"

      - id: qmlformat
        name: QML Format
        entry: qmlformat
        language: system
        files: '\.qml$'
        args: ["-i"] # In-place formatting
        description: "Format QML files consistently"

  # Nix file formatting and validation (disabled - no Nix available)
  # - repo: https://github.com/nix-community/nixpkgs-fmt
  #   rev: v1.3.0
  #   hooks:
  #     - id: nixpkgs-fmt
  #       files: '\.nix$'

  # Shell script linting (disabled due to installation issues)
  # - repo: https://github.com/shellcheck-py/shellcheck-py
  #   rev: v0.10.0.1
  #   hooks:
  #     - id: shellcheck
  #       args: ['-e', 'SC1091']  # Ignore sourcing non-existent files

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: '\.(yaml|yml|json|md)$'
        exclude: '(\.github/workflows/.*\.yml$|node_modules/)' # Don't format GitHub Actions or node_modules

  # Git commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Custom validation hooks
  - repo: local
    hooks:
      - id: validate-caelestia-structure
        name: Validate Caelestia Structure
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -c
          - |
            echo "üîç Validating Caelestia project structure..."

            # Check required directories
            required_dirs=("modules" "services" "components" "config" "utils")
            for dir in "${required_dirs[@]}"; do
              if [ ! -d "$dir" ]; then
                echo "‚ùå Missing required directory: $dir"
                exit 1
              fi
            done

            # Check main shell file
            if [ ! -f "shell.qml" ]; then
              echo "‚ùå Missing main shell.qml file"
              exit 1
            fi

            # Check flake files
            if [ ! -f "flake.nix" ]; then
              echo "‚ùå Missing flake.nix"
              exit 1
            fi

            echo "‚úÖ Project structure validation passed!"

      - id: check-magnus-customizations
        name: Check Magnus's Customizations
        entry: bash
        language: system
        files: '^(services/Network\.qml|services/BitDepth\.qml|modules/bar/popouts/Monitor\.qml)$'
        args:
          - -c
          - |
            echo "üé® Checking Magnus's custom enhancements..."

            # Check for Network service enhancements
            if [ -f "services/Network.qml" ]; then
              if ! grep -q "ethernetConnections" services/Network.qml; then
                echo "‚ö†Ô∏è  Network service may be missing ethernet enhancements"
                exit 1
              fi

              if ! grep -q "mullvadConnected" services/Network.qml; then
                echo "‚ö†Ô∏è  Network service may be missing VPN enhancements"
                exit 1
              fi
              echo "‚úÖ Network service enhancements verified"
            fi

            # Check for Monitor management
            if [ -f "modules/bar/popouts/Monitor.qml" ]; then
              echo "‚úÖ Monitor management UI verified"
            fi

            # Check for BitDepth service
            if [ -f "services/BitDepth.qml" ]; then
              echo "‚úÖ BitDepth service verified"
            fi

            echo "‚úÖ Custom enhancements check completed!"

      # Disabled due to Nix not being available
      # - id: nix-flake-check
      #   name: Nix Flake Check
      #   entry: nix
      #   language: system
      #   pass_filenames: false
      #   files: '^(flake\.nix|flake\.lock)$'
      #   args: ['flake', 'check', '--show-trace']
      #   description: 'Validate Nix flake configuration'

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
