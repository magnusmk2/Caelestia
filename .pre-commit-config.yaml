# SPDX-FileCopyrightText: ¬© 2025 Magnus
# SPDX-License-Identifier: GPL-3.0
# Pre-commit configuration for Caelestia
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Global configuration
default_language_version:
  python: python3.12
  node: "20.11.0"

# Global exclusions - using verbose regex for clarity
exclude: |
  (?x)^(
    node_modules/.*|
    \.git/.*|
    \.cache/.*|
    build/.*|
    dist/.*|
    .*\.patch$|
    .*\.min\.(js|css)$|
    .*\.lock$
  )$

# Fail fast - stop on first failure for faster feedback
fail_fast: true

# Minimum pre-commit version required
minimum_pre_commit_version: "3.0.0"

repos:
  # General file checks - using latest stable version
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: ["--unsafe"] # Allow custom YAML tags
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-ast
        files: '\.py$'
      - id: check-builtin-literals
      - id: check-docstring-first
        files: '\.py$'
      - id: debug-statements
        files: '\.py$'
      - id: name-tests-test
        files: '(^|/)tests/.+\.py$'

  # QML and JavaScript linting (disabled due to QuickShell-specific imports)
  # - repo: local
  #   hooks:
  #     - id: qmllint
  #       name: QML Lint
  #       entry: qmllint
  #       language: system
  #       files: '\.qml$'
  #       args: ["--check-unqualified"]
  #       description: "Lint QML files for syntax and style issues"
  #
  #     - id: qmlformat
  #       name: QML Format
  #       entry: qmlformat
  #       language: system
  #       files: '\.qml$'
  #       args: ["--inplace", "--no-sort"]
  #       description: "Format QML files consistently"

  # Security checks - disabled until detect-secrets is installed
  # - repo: https://github.com/Yelp/detect-secrets
  #   rev: v1.5.0
  #   hooks:
  #     - id: detect-secrets
  #       args: ["--baseline", ".secrets.baseline"]
  #       exclude: |
  #         (?x)^(
  #           .*\.lock$|
  #           .*\.min\.js$|
  #           .*\.min\.css$
  #         )$

  # Additional file type checks (disabled until ESLint config is set up)
  # - repo: https://github.com/pre-commit/mirrors-eslint
  #   rev: v9.9.1
  #   hooks:
  #     - id: eslint
  #       files: '\.(js|jsx|ts|tsx)$'
  #       additional_dependencies:
  #         - eslint@^8.0.0
  #         - eslint-config-prettier@^8.0.0

  # Nix file formatting and validation (disabled - no Nix available)
  # - repo: https://github.com/nix-community/nixpkgs-fmt
  #   rev: v1.3.0
  #   hooks:
  #     - id: nixpkgs-fmt
  #       files: '\.nix$'

  # Shell script linting (disabled due to installation issues)
  # - repo: https://github.com/shellcheck-py/shellcheck-py
  #   rev: v0.10.0.1
  #   hooks:
  #     - id: shellcheck
  #       args: ['-e', 'SC1091']  # Ignore sourcing non-existent files

  # YAML/JSON/Markdown formatting - latest stable
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: '\.(yaml|yml|json|md)$'
        exclude: '(\.github/workflows/.*\.yml$|node_modules/)' # Don't format GitHub Actions or node_modules

  # Git commit message validation - latest stable
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.1
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Custom validation hooks
  - repo: local
    hooks:
      - id: validate-caelestia-structure
        name: Validate Caelestia Structure
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit, pre-push]
        args:
          - -euo
          - pipefail
          - -c
          - |
            set -euo pipefail
            echo "üîç Validating Caelestia project structure..."

            # Performance: Check critical files first
            critical_files=("shell.qml" "flake.nix")
            for file in "${critical_files[@]}"; do
              if [[ ! -f "$file" ]]; then
                echo "‚ùå Missing critical file: $file"
                exit 1
              fi
            done

            # Check required directories with better error messages
            required_dirs=("modules" "services" "components" "config" "utils")
            missing_dirs=()
            for dir in "${required_dirs[@]}"; do
              if [[ ! -d "$dir" ]]; then
                missing_dirs+=("$dir")
              fi
            done

            if [[ ${#missing_dirs[@]} -gt 0 ]]; then
              echo "‚ùå Missing required directories: ${missing_dirs[*]}"
              echo "üí° Hint: These directories are essential for Caelestia structure"
              exit 1
            fi

            echo "‚úÖ Project structure validation passed!"

      - id: check-magnus-customizations
        name: Check Magnus's Customizations
        entry: bash
        language: system
        files: '^(services/Network\.qml|services/BitDepth\.qml|modules/bar/popouts/Monitor\.qml)$'
        stages: [pre-commit]
        args:
          - -euo
          - pipefail
          - -c
          - |
            set -euo pipefail
            echo "üé® Checking Magnus's custom enhancements..."

            # Define enhancement patterns for validation
            declare -A enhancements=(
              ["services/Network.qml"]="ethernetConnections mullvadConnected"
              ["services/BitDepth.qml"]="bitDepth"
              ["modules/bar/popouts/Monitor.qml"]="monitorIdentify"
            )

            missing_enhancements=()

            # Check Network service enhancements
            if [[ -f "services/Network.qml" ]]; then
              for pattern in ethernetConnections mullvadConnected; do
                if ! grep -q "$pattern" services/Network.qml; then
                  missing_enhancements+=("Network service: $pattern")
                fi
              done
              [[ ${#missing_enhancements[@]} -eq 0 ]] && echo "‚úÖ Network service enhancements verified"
            fi

            # Check Monitor management
            if [[ -f "modules/bar/popouts/Monitor.qml" ]]; then
              if ! grep -q "monitorData\|refreshing.*monitor" modules/bar/popouts/Monitor.qml; then
                missing_enhancements+=("Monitor management: core functionality")
              else
                echo "‚úÖ Monitor management UI verified"
              fi
            fi

            # Check BitDepth service
            if [[ -f "services/BitDepth.qml" ]]; then
              if ! grep -q "is10Bit\|currentMode\|toggleScript" services/BitDepth.qml; then
                missing_enhancements+=("BitDepth service: core functionality")
              else
                echo "‚úÖ BitDepth service verified"
              fi
            fi

            # Report any missing enhancements
            if [[ ${#missing_enhancements[@]} -gt 0 ]]; then
              echo "‚ö†Ô∏è  Missing custom enhancements:"
              printf "   - %s\n" "${missing_enhancements[@]}"
              echo "üí° Hint: These are Magnus's custom features that should be preserved"
              exit 1
            fi

            echo "‚úÖ All custom enhancements verified!"

      - id: performance-check
        name: Performance Check
        entry: bash
        language: system
        files: '\.(qml|js)$'
        stages: [pre-push]
        args:
          - -euo
          - pipefail
          - -c
          - |
            set -euo pipefail
            echo "‚ö° Running performance checks..."

            # Check for performance anti-patterns in QML
            performance_issues=()

            for file in "$@"; do
              if [[ "$file" == *.qml ]]; then
                # Check for common performance issues
                if grep -q "console\.log\|console\.debug" "$file"; then
                  performance_issues+=("$file: Contains console logging (impacts performance)")
                fi

                if grep -q "Timer.*interval.*[0-9]\{1,2\}[^0-9]" "$file"; then
                  performance_issues+=("$file: Very short timer intervals detected")
                fi

                if grep -q "anchors\.fill.*parent.*anchors\." "$file"; then
                  performance_issues+=("$file: Complex anchor chains detected")
                fi
              fi
            done

            if [[ ${#performance_issues[@]} -gt 0 ]]; then
              echo "‚ö†Ô∏è  Performance issues detected:"
              printf "   - %s\n" "${performance_issues[@]}"
              echo "üí° Consider optimizing these patterns for better performance"
              # Don't fail, just warn
            fi

            echo "‚úÖ Performance check completed"

      # Disabled due to Nix not being available
      # - id: nix-flake-check
      #   name: Nix Flake Check
      #   entry: nix
      #   language: system
      #   pass_filenames: false
      #   files: '^(flake\.nix|flake\.lock)$'
      #   args: ['flake', 'check', '--show-trace']
      #   description: 'Validate Nix flake configuration'

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    style: auto fixes from pre-commit hooks

    Applied automatic formatting and linting fixes.

    Co-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "chore: pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip:
    - detect-secrets
    - performance-check
  submodules: false
